<?php

//[STAMP] f21be3488f5ec097dd446bc7f97edf67

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

/**
 * Inherited Methods.
 *
 * @method void wantToTest($text)
 * @method void wantTo($text)
 * @method void execute($callable)
 * @method void expectTo($prediction)
 * @method void expect($prediction)
 * @method void amGoingTo($argumentation)
 * @method void am($role)
 * @method void lookForwardTo($achieveValue)
 * @method void comment($description)
 * @method void haveFriend($name)
 */
class FunctionalTester extends \Codeception\Actor
{
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts a user and appropriate meta in the database.
     *
     * @param string $user_login The user login slug
     * @param int    $user_id    The user ID.
     * @param string $role       The user role slug, e.g. "administrator"; defaults to "subscriber".
     * @param array  $userData   An associative array of column names and values overridind defaults in the "users" and "usermeta" table.
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::haveUserInDatabase()
     */
    public function haveUserInDatabase($user_login, $user_id, $role = null, $userData = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('haveUserInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts or updates a database entry.
     *
     * An override of the parent method to allow back compatibililty and configuration based use.
     *
     * @param string $table The table name.
     * @param array  $data  An associative array of the column names and values to insert.
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::haveInDatabase()
     */
    public function haveInDatabase($table, $data)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('haveInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if an option is in the database and is serialized.
     *
     * Will look in the "options" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::seeSerializedOptionInDatabase()
     */
    public function canSeeSerializedOptionInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeSerializedOptionInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if an option is in the database and is serialized.
     *
     * Will look in the "options" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::seeSerializedOptionInDatabase()
     */
    public function seeSerializedOptionInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeSerializedOptionInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if an option is in the database.
     *
     * Will look in the "options" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::seeOptionInDatabase()
     */
    public function canSeeOptionInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeOptionInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if an option is in the database.
     *
     * Will look in the "options" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::seeOptionInDatabase()
     */
    public function seeOptionInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeOptionInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a serialized option is not in the database.
     *
     * Will look in the "options" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::dontSeeSerializedOptionInDatabase()
     */
    public function cantSeeSerializedOptionInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeSerializedOptionInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a serialized option is not in the database.
     *
     * Will look in the "options" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontSeeSerializedOptionInDatabase()
     */
    public function dontSeeSerializedOptionInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeSerializedOptionInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that an option is not in the database.
     *
     * Will look in the "options" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::dontSeeOptionInDatabase()
     */
    public function cantSeeOptionInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeOptionInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that an option is not in the database.
     *
     * Will look in the "options" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontSeeOptionInDatabase()
     */
    public function dontSeeOptionInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeOptionInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a post meta value in the database.
     *
     * Will look up the "postmeta"  table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::seePostMetaInDatabase()
     */
    public function canSeePostMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seePostMetaInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a post meta value in the database.
     *
     * Will look up the "postmeta"  table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::seePostMetaInDatabase()
     */
    public function seePostMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seePostMetaInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts a link in the database.
     *
     * Will insert in the "links" table.
     *
     * @param int   $link_id The link id to insert.
     * @param array $data    The data to insert.
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::haveLinkInDatabase()
     */
    public function haveLinkInDatabase($link_id, $data = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('haveLinkInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a link in the database.
     *
     * Will look up the "links" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::seeLinkInDatabase()
     */
    public function canSeeLinkInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeLinkInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a link in the database.
     *
     * Will look up the "links" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::seeLinkInDatabase()
     */
    public function seeLinkInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeLinkInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a link is not in the database.
     *
     * Will look up the "links" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::dontSeeLinkInDatabase()
     */
    public function cantSeeLinkInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeLinkInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a link is not in the database.
     *
     * Will look up the "links" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontSeeLinkInDatabase()
     */
    public function dontSeeLinkInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeLinkInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a post meta value is not there.
     *
     * Will look up the "postmeta" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::dontSeePostMetaInDatabase()
     */
    public function cantSeePostMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeePostMetaInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a post meta value is not there.
     *
     * Will look up the "postmeta" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontSeePostMetaInDatabase()
     */
    public function dontSeePostMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeePostMetaInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a post to term relation exists in the database.
     *
     * Will look up the "term_relationships" table.
     *
     * @param int $post_id    The post ID.
     * @param int $term_id    The term ID.
     * @param int $term_order The order the term applies to the post, defaults to 0.
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::seePostWithTermInDatabase()
     */
    public function canSeePostWithTermInDatabase($post_id, $term_id, $term_order = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seePostWithTermInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a post to term relation exists in the database.
     *
     * Will look up the "term_relationships" table.
     *
     * @param int $post_id    The post ID.
     * @param int $term_id    The term ID.
     * @param int $term_order The order the term applies to the post, defaults to 0.
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::seePostWithTermInDatabase()
     */
    public function seePostWithTermInDatabase($post_id, $term_id, $term_order = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seePostWithTermInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a user is in the database.
     *
     * Will look up the "users" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::seeUserInDatabase()
     */
    public function canSeeUserInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeUserInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a user is in the database.
     *
     * Will look up the "users" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::seeUserInDatabase()
     */
    public function seeUserInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeUserInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a user is not in the database.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::dontSeeUserInDatabase()
     */
    public function cantSeeUserInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeUserInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a user is not in the database.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontSeeUserInDatabase()
     */
    public function dontSeeUserInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeUserInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts a post in the database.
     *
     * @param int   $ID   The post ID.
     * @param array $data An associative array of post data to override default and random generated values.
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::havePostInDatabase()
     */
    public function havePostInDatabase($ID, $data = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('havePostInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts a post in the database.
     *
     * @param int   $ID   The post ID.
     * @param array $data An associative array of post data to override default and random generated values.
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::havePageInDatabase()
     */
    public function havePageInDatabase($ID, $data = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('havePageInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a post in the database.
     *
     * Will look up the "posts" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::seePostInDatabase()
     */
    public function canSeePostInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seePostInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a post in the database.
     *
     * Will look up the "posts" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::seePostInDatabase()
     */
    public function seePostInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seePostInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a post is not in the database.
     *
     * Will look up the "posts" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::dontSeePostInDatabase()
     */
    public function cantSeePostInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeePostInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a post is not in the database.
     *
     * Will look up the "posts" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontSeePostInDatabase()
     */
    public function dontSeePostInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeePostInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a page in the database.
     *
     * Will look up the "posts" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::seePageInDatabase()
     */
    public function canSeePageInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seePageInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a page in the database.
     *
     * Will look up the "posts" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::seePageInDatabase()
     */
    public function seePageInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seePageInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a page is not in the database.
     *
     * Will look up the "posts" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::dontSeePageInDatabase()
     */
    public function cantSeePageInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeePageInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a page is not in the database.
     *
     * Will look up the "posts" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontSeePageInDatabase()
     */
    public function dontSeePageInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeePageInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that some user meta value is in the database.
     *
     * Will look up the "usermeta" table.
     *
     * @param int         $user_id    The user ID.
     * @param string      $meta_key
     * @param string /int $meta_value
     * @param int         $umeta_id   The optional user meta id.
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::haveUserMetaInDatabase()
     */
    public function haveUserMetaInDatabase($user_id, $meta_key, $meta_value, $umeta_id = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('haveUserMetaInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts a link to term relationship in the database.
     *
     * If "checkExistence" then will make some checks for missing term and/or link.
     *
     * @param int $link_id    The link ID.
     * @param int $term_id    The term ID.
     * @param int $term_order An optional term order value, will default to 0.
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::haveLinkWithTermInDatabase()
     */
    public function haveLinkWithTermInDatabase($link_id, $term_id, $term_order = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('haveLinkWithTermInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts a comment in the database.
     *
     * @param int   $comment_ID      The comment ID.
     * @param int   $comment_post_ID The id of the post the comment refers to.
     * @param array $data            The comment data overriding default and random generated values.
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::haveCommentInDatabase()
     */
    public function haveCommentInDatabase($comment_ID, $comment_post_ID, $data = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('haveCommentInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a comment in the database.
     *
     * Will look up the "comments" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::seeCommentInDatabase()
     */
    public function canSeeCommentInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeCommentInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a comment in the database.
     *
     * Will look up the "comments" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::seeCommentInDatabase()
     */
    public function seeCommentInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeCommentInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a comment is not in the database.
     *
     * Will look up the "comments" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::dontSeeCommentInDatabase()
     */
    public function cantSeeCommentInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCommentInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a comment is not in the database.
     *
     * Will look up the "comments" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontSeeCommentInDatabase()
     */
    public function dontSeeCommentInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeCommentInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a comment meta value is in the database.
     *
     * Will look up the "commentmeta" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::seeCommentMetaInDatabase()
     */
    public function canSeeCommentMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeCommentMetaInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a comment meta value is in the database.
     *
     * Will look up the "commentmeta" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::seeCommentMetaInDatabase()
     */
    public function seeCommentMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeCommentMetaInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a comment meta value is not in the database.
     *
     * Will look up the "commentmeta" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::dontSeeCommentMetaInDatabase()
     */
    public function cantSeeCommentMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCommentMetaInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a comment meta value is not in the database.
     *
     * Will look up the "commentmeta" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontSeeCommentMetaInDatabase()
     */
    public function dontSeeCommentMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeCommentMetaInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts a post to term relationship in the database.
     *
     * Will conditionally check for post and term existence if "checkExistence" is set to true.
     *
     * @param int $post_id    The post ID.
     * @param int $term_id    The term ID.
     * @param int $term_order The optional term order.
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::havePostWithTermInDatabase()
     */
    public function havePostWithTermInDatabase($post_id, $term_id, $term_order = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('havePostWithTermInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts a commment meta value in the database.
     *
     * @param int         $comment_id The comment ID.
     * @param string      $meta_key
     * @param string /int $meta_value
     * @param int         $meta_id    The optinal meta ID.
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::haveCommentMetaInDatabase()
     */
    public function haveCommentMetaInDatabase($comment_id, $meta_key, $meta_value, $meta_id = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('haveCommentMetaInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts a post meta value in the database.
     *
     * Will check for post existence if "checkExistence" set to true.
     *
     * @param int         $post_id
     * @param string      $meta_key
     * @param string /int $meta_value
     * @param int         $meta_id    The optional meta ID.
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::havePostmetaInDatabase()
     */
    public function havePostMetaInDatabase($post_id, $meta_key, $meta_value, $meta_id = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('havePostmetaInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts a term in the database.
     *
     * @param string $term    The term scree name, e.g. "Fuzzy".
     * @param int    $term_id
     * @param array  $args    Term arguments overriding default and generated ones.
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::haveTermInDatabase()
     */
    public function haveTermInDatabase($term, $term_id, $args = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('haveTermInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a term in the database.
     *
     * Will look up the "terms" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::seeTermInDatabase()
     */
    public function canSeeTermInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeTermInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a term in the database.
     *
     * Will look up the "terms" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::seeTermInDatabase()
     */
    public function seeTermInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeTermInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a term is not in the database.
     *
     *  Will look up the "terms" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::dontSeeTermInDatabase()
     */
    public function cantSeeTermInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeTermInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a term is not in the database.
     *
     *  Will look up the "terms" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontSeeTermInDatabase()
     */
    public function dontSeeTermInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeTermInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a user meta value in the database.
     *
     * Will look up the "usermeta" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::seeUserMetaInDatabase()
     */
    public function canSeeUserMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeUserMetaInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks for a user meta value in the database.
     *
     * Will look up the "usermeta" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::seeUserMetaInDatabase()
     */
    public function seeUserMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeUserMetaInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that a user meta value is not in the database.
     *
     * Will look up the "usermeta" table.
     *
     * @param array $criteria
     *
     * @return void
     *              Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\WPDb::dontSeeUserMetaInDatabase()
     */
    public function cantSeeUserMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeUserMetaInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Check that a user meta value is not in the database.
     *
     * Will look up the "usermeta" table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontSeeUserMetaInDatabase()
     */
    public function dontSeeUserMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeUserMetaInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts a serialized option in the database.
     *
     * @param string      $option_name
     * @param string /int $option_value
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::haveSerializedOptionInDatabase()
     */
    public function haveSerializedOptionInDatabase($option_name, $option_value)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('haveSerializedOptionInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts an option in the database.
     *
     * @param string      $option_name
     * @param string /int $option_value
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::haveOptionInDatabase()
     */
    public function haveOptionInDatabase($option_name, $option_value)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('haveOptionInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Removes an entry from the commentmeta table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontHaveCommentMetaInDatabase()
     */
    public function dontHaveCommentMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('dontHaveCommentMetaInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Removes an entry from the comment table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontHaveCommentInDatabase()
     */
    public function dontHaveCommentInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('dontHaveCommentInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Removes an entry from the links table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontHaveLinkInDatabase()
     */
    public function dontHaveLinkInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('dontHaveLinkInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Removes an entry from the options table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontHaveOptionInDatabase()
     */
    public function dontHaveOptionInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('dontHaveOptionInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Removes an entry from the postmeta table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontHavePostMetaInDatabase()
     */
    public function dontHavePostMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('dontHavePostMetaInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Removes an entry from the posts table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontHavePostInDatabase()
     */
    public function dontHavePostInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('dontHavePostInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Removes an entry from the term_relationships table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontHaveTermRelationshipInDatabase()
     */
    public function dontHaveTermRelationshipInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('dontHaveTermRelationshipInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Removes an entry from the term_taxonomy table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontHaveTermTaxonomyInDatabase()
     */
    public function dontHaveTermTaxonomyInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('dontHaveTermTaxonomyInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Removes an entry from the terms table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontHaveTermInDatabase()
     */
    public function dontHaveTermInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('dontHaveTermInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Removes an entry from the usermeta table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontHaveUserMetaInDatabase()
     */
    public function dontHaveUserMetaInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('dontHaveUserMetaInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Removes an entry from the users table.
     *
     * @param array $criteria
     *
     * @return void
     *
     * @see \Codeception\Module\WPDb::dontHaveUserInDatabase()
     */
    public function dontHaveUserInDatabase($criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('dontHaveUserInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes a database entry.
     *
     * @param string $table The table name.
     * @param array  $data  An associative array of the column names and values to use as deletion criteria.
     *
     * @return void
     *
     * @see \Codeception\Module\ExtendedDb::dontHaveInDatabase()
     */
    public function dontHaveInDatabase($table, $criteria)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('dontHaveInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Inserts or updates a database entry on duplicate key.
     *
     * @param string $table The table name.
     * @param array  $data  An associative array of the column names and values to insert.
     *
     * @return void
     *
     * @see \Codeception\Module\ExtendedDb::haveOrUpdateInDatabase()
     */
    public function haveOrUpdateInDatabase($table, $data)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('haveOrUpdateInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if a row with given column values exists.
     * Provide table name and column values.
     *
     * Example:
     *
     * ``` php
     * <?php
     * $I->seeInDatabase('users', array('name' => 'Davert', 'email' => 'davert@mail.com'));
     *
     * ```
     * Will generate:
     *
     * ``` sql
     * SELECT COUNT(*) FROM `users` WHERE `name` = 'Davert' AND `email` = 'davert@mail.com'
     * ```
     * Fails if no such user found.
     *
     * @param       $table
     * @param array $criteria
     *                        Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\Db::seeInDatabase()
     */
    public function canSeeInDatabase($table, $criteria = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if a row with given column values exists.
     * Provide table name and column values.
     *
     * Example:
     *
     * ``` php
     * <?php
     * $I->seeInDatabase('users', array('name' => 'Davert', 'email' => 'davert@mail.com'));
     *
     * ```
     * Will generate:
     *
     * ``` sql
     * SELECT COUNT(*) FROM `users` WHERE `name` = 'Davert' AND `email` = 'davert@mail.com'
     * ```
     * Fails if no such user found.
     *
     * @param       $table
     * @param array $criteria
     *
     * @see \Codeception\Module\Db::seeInDatabase()
     */
    public function seeInDatabase($table, $criteria = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Effect is opposite to ->seeInDatabase
     *
     * Checks if there is no record with such column values in database.
     * Provide table name and column values.
     *
     * Example:
     *
     * ``` php
     * <?php
     * $I->dontSeeInDatabase('users', array('name' => 'Davert', 'email' => 'davert@mail.com'));
     *
     * ```
     * Will generate:
     *
     * ``` sql
     * SELECT COUNT(*) FROM `users` WHERE `name` = 'Davert' AND `email` = 'davert@mail.com'
     * ```
     * Fails if such user was found.
     *
     * @param       $table
     * @param array $criteria
     *                        Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\Db::dontSeeInDatabase()
     */
    public function cantSeeInDatabase($table, $criteria = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInDatabase',
            func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Effect is opposite to ->seeInDatabase
     *
     * Checks if there is no record with such column values in database.
     * Provide table name and column values.
     *
     * Example:
     *
     * ``` php
     * <?php
     * $I->dontSeeInDatabase('users', array('name' => 'Davert', 'email' => 'davert@mail.com'));
     *
     * ```
     * Will generate:
     *
     * ``` sql
     * SELECT COUNT(*) FROM `users` WHERE `name` = 'Davert' AND `email` = 'davert@mail.com'
     * ```
     * Fails if such user was found.
     *
     * @param       $table
     * @param array $criteria
     *
     * @see \Codeception\Module\Db::dontSeeInDatabase()
     */
    public function dontSeeInDatabase($table, $criteria = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeInDatabase', func_get_args()));
    }

    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fetches a single column value from a database.
     * Provide table name, desired column and criteria.
     *
     * Example:
     *
     * ``` php
     * <?php
     * $mail = $I->grabFromDatabase('users', 'email', array('name' => 'Davert'));
     *
     * ```
     *
     * @version 1.1
     *
     * @param       $table
     * @param       $column
     * @param array $criteria
     *
     * @return mixed
     *
     * @see \Codeception\Module\Db::grabFromDatabase()
     */
    public function grabFromDatabase($table, $column, $criteria = null)
    {
        return $this->scenario->runStep(new \Codeception\Step\Action('grabFromDatabase', func_get_args()));
    }
}
